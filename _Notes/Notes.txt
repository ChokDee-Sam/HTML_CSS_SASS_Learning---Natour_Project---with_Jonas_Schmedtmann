
/* On réinitialise le tout */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Mais on met tout ce qui est lié à la police d'écriture dans le body */
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 17;
    lighting-color: #777;
}

/* clip-path fonctionne par points X Y */
clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);


On utilise un h1 qui englobe des span en display block, pour faire un titre sur plusieurs lignes
<h1 class="heading-primary">
                <span class="heading-primary-main">Outdoors</span>
                <span class="heading-primary-sub">is where life happens</span>
</h1>

Pour éviter un petit bug de tremblement sur une animation/transition
    backface-visibility: hidden;  (dans le bloc parent ?)

    selection > CTRL + D = selection multiple par étapes

    Possibilité de mettre des animation: keyframeName sur des hover etc

    un lien deguisé en bouton necessite un display inline block
            afin de preserver le flux des elements d'avant et apres 
                    (pas de superposition)

Pour centrer un element facilement
    il faut qu'il ait des caracteristiques de texte (inline block)
        text-align: center;     sur son conteneur parent

Si on rajoute un delay à une animation, 
    /* animation-fill-mode: backwards; */
        permet de debuter l'animation à 0%


Permet l'héritage sur un élément qui, de base, ne l'est pas
*, *::before,*::after      { box-sizing: inherit}
body                                {box-sizing: border-box}

npm run compile:sass





.btn:hover {
    transform: translateY(-0.8rem);
    box-shadow: 0 1.5rem 2rem rgba(0, 0, 0, 0.2);

    /* letter-spacing: 2px;
    padding: 15px 60px;
    border-radius: 0;
    box-shadow: 30px 25px 10px rgba(0, 0, 0, 0.2); */
}

.btn:active {
    transform: translateY(-0.4rem);
    box-shadow: 0.4rem 0.8rem 0.7rem rgba(0, 0, 0, 0.2);
}
.btn--white {
    background-color: white;
    color: rgba(119, 119, 119, 0.6);
    letter-spacing: 0.05rem;
}

/* on va planquer une forme de bouton derriere */
.btn::after {
    /* on lui donne un content vide pour s'afficher */
    content: "";

    /* on reprend le display et la forme */
    display: inline-block;
    border-radius: 10rem;

    /* on lui donne la taille exacte */
    height: 100%;
    width: 100%;

    /* on le positionne exactement au même endroit */
    position: absolute;
    top: 0;
    left: 0;
    /* on n'oublie pas de mettre en relatif où on veut commencer */

    /* on le planque derrière */
    z-index: -1;

    /* on lui met une transition plus longue pour donner un effet de continuité */
    transition: all 1s;
}

/* maintenant on va determiner le contenu */
.btn--white::after {
    /* on lui met la meme couleur pour créer l'illusion */
    background-color: rgba(255, 255, 255, 0.507);
}

.btn:hover::after {
    opacity: 0;
    transform: scaleX(1.2) scaleY(1.9);
    transition: 0.6s;
}


Définir l'absolute intelligemment
    left si proche coté gauche 
    right si proche coté droit
    

    // uniquement pour l'enfant direct
    & > * {
        transform: skewY(7deg);
    }